
# import torch
# import torch.nn as nn
# import torch.utils.checkpoint as checkpoint

import megengine as mge
import megengine.module as M
import megengine.functional as F
import megengine.functional
import math
from registry import ARCH_REGISTRY
import collections.abc
from itertools import repeat
import warnings
import numpy as np
from megengine import Parameter

# From PyTorch
def _ntuple(n):

    def parse(x):
        if isinstance(x, collections.abc.Iterable):
            return x
        return tuple(repeat(x, n))

    return parse


to_1tuple = _ntuple(1)
to_2tuple = _ntuple(2)
to_3tuple = _ntuple(3)
to_4tuple = _ntuple(4)
to_ntuple = _ntuple

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/weight_init.py
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            'mean is more than 2 std from [a, b] in nn.init.trunc_normal_. '
            'The distribution of values may be incorrect.',
            stacklevel=2)

    #with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
    low = norm_cdf((a - mean) / std)
    up = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [low, up], then translate to
    # [2l-1, 2u-1].
    #tensor.uniform_(2 * low - 1, 2 * up - 1)
    tensor = megengine.random.uniform(low=2 * low - 1,high= 2 * up - 1)
    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal

    #tensor.erfinv_()

    # Transform to proper mean, std
    #tensor.mul_(std * math.sqrt(2.))
    tensor = F.mul(tensor,std * math.sqrt(2.))

    #tensor.add_(mean)
    tensor = F.add(tensor, mean)

    # Clamp to ensure it's in the proper range
    #tensor.clamp_(min=a, max=b)
    tensor = F.clip(tensor,a,b)
    return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution.

    From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/weight_init.py

    The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value

    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

def drop_path(x, drop_prob: float = 0., training: bool = False):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).

    From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/drop.py
    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0], ) + (1, ) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    #random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor = keep_prob + megengine.random.uniform(size=shape).astype(x.dtype).to(x.device)
    #random_tensor.floor_()  # binarize
    random_tensor = F.floor(random_tensor)
    #output = x.div(keep_prob) * random_tensor
    output = F.div(x,keep_prob) * random_tensor
    # print("output=",output)
    return output


class DropPath(M.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).

    From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/drop.py
    """

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(M.Module):

    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=M.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = M.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = M.Linear(hidden_features, out_features)
        self.drop = M.Dropout(drop)

    def forward(self, x):
        #print("x=",x.shape) #[1, 4096, 96]
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


def window_partition(x, window_size):
    """
    Args:
        x: (b, h, w, c)
        window_size (int): window size

    Returns:
        windows: (num_windows*b, window_size, window_size, c)
    """
    b, h, w, c = x.shape
    #x = x.view(b, h // window_size, window_size, w // window_size, window_size, c)
    x = F.reshape(x,(b, h // window_size, window_size, w // window_size, window_size, c))

    #windows = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(-1, window_size, window_size, c)
    windows = F.copy(x)
    windows = F.reshape( F.transpose(windows,(0, 1, 3, 2, 4, 5)), (-1, window_size, window_size, c) )
    return windows


def window_reverse(windows, window_size, h, w):
    """
    Args:
        windows: (num_windows*b, window_size, window_size, c)
        window_size (int): Window size
        h (int): Height of image
        w (int): Width of image

    Returns:
        x: (b, h, w, c)
    """
    b = int(windows.shape[0] / (h * w / window_size / window_size))
    # x = windows.view(b, h // window_size, w // window_size, window_size, window_size, -1)
    x = F.reshape(windows,(b, h // window_size, w // window_size, window_size, window_size, -1))
    # x = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(b, h, w, -1)
    x = F.transpose(x,(0, 1, 3, 2, 4, 5))
    x = F.reshape(x,(b, h, w, -1))
    return x


class WindowAttention(M.Module):
    r""" Window based multi-head self attention (W-MSA) module with relative position bias.
    It supports both of shifted and non-shifted window.

    Args:
        dim (int): Number of input channels.
        window_size (tuple[int]): The height and width of the window.
        num_heads (int): Number of attention heads.
        qkv_bias (bool, optional):  If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set
        attn_drop (float, optional): Dropout ratio of attention weight. Default: 0.0
        proj_drop (float, optional): Dropout ratio of output. Default: 0.0
    """

    def __init__(self, dim, window_size, num_heads, qkv_bias=True, qk_scale=None, attn_drop=0., proj_drop=0.):

        super().__init__()
        self.dim = dim
        self.window_size = window_size  # Wh, Ww
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim**-0.5

        # define a parameter table of relative position bias
        self.relative_position_bias_table = megengine.Parameter(
            F.zeros(((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)))  # 2*Wh-1 * 2*Ww-1, nH

        # get pair-wise relative position index for each token inside the window
        # coords_h = F.arange(self.window_size[0])
        # coords_w = F.arange(self.window_size[1])
        # coords = torch.stack(torch.meshgrid([coords_h, coords_w]))  # 2, Wh, Ww

        coords_h = np.arange(self.window_size[0])
        coords_w = np.arange(self.window_size[1])
        coords = np.meshgrid(coords_h, coords_w)
        coords = mge.tensor(coords)
        coords = F.stack(coords)
        #print("coords=", coords.shape) #[2, 8, 8]

        coords_flatten = F.flatten(coords, 1)  # 2, Wh*Ww
        #print("coords_flatten=", coords_flatten.shape)
        #relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]  # 2, Wh*Ww, Wh*Ww

        # print("F.expand_dims(coords_flatten, 2)=",F.expand_dims(coords_flatten, 2).shape)
        # print("F.expand_dims(coords_flatten, 1)=", F.expand_dims(coords_flatten, 1).shape)
        relative_coords = F.expand_dims(coords_flatten, 2) - F.expand_dims(coords_flatten, 1)
        #print("relative_coords=",relative_coords.shape) #[2, 64, 64]
        #relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # Wh*Ww, Wh*Ww, 2
        relative_coords = F.transpose(relative_coords,(1, 2, 0))
        #print("relative_coords=", relative_coords.shape) #[64, 64, 2]
        relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0
        relative_coords[:, :, 1] += self.window_size[1] - 1
        relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1
        relative_position_index = relative_coords.sum(-1)  # Wh*Ww, Wh*Ww

        #self.register_buffer('relative_position_index', relative_position_index)
        self.relative_position_index = Parameter(relative_position_index).detach()
        #print("self.relative_position_index=",self.relative_position_index.dtype)

        self.qkv = M.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = M.Dropout(attn_drop)
        self.proj = M.Linear(dim, dim)

        self.proj_drop = M.Dropout(proj_drop)

        trunc_normal_(self.relative_position_bias_table, std=.02)
        self.softmax = M.Softmax(axis=-1)

    def forward(self, x, mask=None):
        """
        Args:
            x: input features with shape of (num_windows*b, n, c)
            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None
        """
        #print("x.shape=",x.shape) #[64, 64, 96] [1,64,64,96]->[64,8,8,96]->[64,8*8,96]
        b_, n, c = x.shape
        #print("x=",x.shape)
        #qkv = self.qkv(x).reshape(b_, n, 3, self.num_heads, c // self.num_heads).permute(2, 0, 3, 1, 4)
        qkv = self.qkv(x).reshape(b_, n, 3, self.num_heads, c // self.num_heads)
        qkv = F.transpose(qkv,(2, 0, 3, 1, 4))
        #print("qkv=",qkv.shape) #[3, 64, 6, 64, 16]
        q, k, v = qkv[0], qkv[1], qkv[2]  # make torchscript happy (cannot use tensor as tuple)
        #print("self.scale=",self.scale) #0.25
        q = q * self.scale
        #print("k = ",k.shape) #(64, 6, 64, 16)
        #attn = (q @ k.transpose(-2, -1))

        attn = F.matmul(q,F.transpose(k,(0,1,3,2)))
        #print("attn=",attn.shape) #[64, 6, 64, 64]

        # relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1)].view(
        #     self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH

        # relative_position_bias = F.reshape(self.relative_position_bias_table[ F.reshape(self.relative_position_index,(-1)) ],(
        #     self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1) )

        #print("self.relative_position_index=",self.relative_position_index.shape)
        relative_position_bias= F.reshape(self.relative_position_index,(-1)).detach()
        relative_position_bias =F.reshape(self.relative_position_bias_table[relative_position_bias],(
            self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1) )

        #relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww
        relative_position_bias = F.transpose(relative_position_bias,(2, 0, 1))
        #print("relative_position_bias=",relative_position_bias.shape) #[6, 64, 64]
        #attn = attn + relative_position_bias.unsqueeze(0)
        attn = attn + F.expand_dims(relative_position_bias,0)

        if mask is not None and mask.shape[0]!=0 :
            nw = mask.shape[0]
            #attn = attn.view(b_ // nw, nw, self.num_heads, n, n) + mask.unsqueeze(1).unsqueeze(0)
            attn = F.reshape(attn,(b_ // nw, nw, self.num_heads, n, n))
            attn = attn + F.expand_dims( F.expand_dims(mask,axis=1),axis=0)
            # attn = attn.view(-1, self.num_heads, n, n)
            attn = F.reshape(attn,(-1, self.num_heads, n, n))
            attn = self.softmax(attn)
        else:
            attn = self.softmax(attn)

        attn = self.attn_drop(attn)

        # x = (attn @ v).transpose(1, 2).reshape(b_, n, c) #[64, 64, 96]

        x = F.matmul(attn,v)
        #print("x=",x.shape) #x= (64, 6, 64, 16)
        x = F.transpose(x,(0,2,1,3))
        x = F.reshape(x,(b_, n, c))
        #print("x2=",x.shape) #x2= (64, 64, 96)
        x = self.proj(x) #self.proj = nn.Linear(dim, dim)
        x = self.proj_drop(x)
        return x

    def extra_repr(self) -> str:
        return f'dim={self.dim}, window_size={self.window_size}, num_heads={self.num_heads}'

    def flops(self, n):
        # calculate flops for 1 window with token length of n
        flops = 0
        # qkv = self.qkv(x)
        flops += n * self.dim * 3 * self.dim
        # attn = (q @ k.transpose(-2, -1))
        flops += self.num_heads * n * (self.dim // self.num_heads) * n
        #  x = (attn @ v)
        flops += self.num_heads * n * n * (self.dim // self.num_heads)
        # x = self.proj(x)
        flops += n * self.dim * self.dim
        return flops


class SwinTransformerBlock(M.Module):
    r""" Swin Transformer Block.

    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        num_heads (int): Number of attention heads.
        window_size (int): Window size.
        shift_size (int): Shift size for SW-MSA.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float, optional): Stochastic depth rate. Default: 0.0
        act_layer (nn.Module, optional): Activation layer. Default: nn.GELU
        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm
    """

    def __init__(self,
                 dim,
                 input_resolution,
                 num_heads,
                 window_size=7,
                 shift_size=0,
                 mlp_ratio=4.,
                 qkv_bias=True,
                 qk_scale=None,
                 drop=0.,
                 attn_drop=0.,
                 drop_path=0.,
                 act_layer=M.GELU,
                 norm_layer=M.LayerNorm):
        super().__init__()
        self.dim = dim
        self.input_resolution = input_resolution
        self.num_heads = num_heads
        self.window_size = window_size
        self.shift_size = shift_size
        self.mlp_ratio = mlp_ratio
        if min(self.input_resolution) <= self.window_size:
            # if window size is larger than input resolution, we don't partition windows
            self.shift_size = 0
            self.window_size = min(self.input_resolution)
        assert 0 <= self.shift_size < self.window_size, 'shift_size must in 0-window_size'

        self.norm1 = norm_layer(dim)
        self.attn = WindowAttention(
            dim,
            window_size=to_2tuple(self.window_size),
            num_heads=num_heads,
            qkv_bias=qkv_bias,
            qk_scale=qk_scale,
            attn_drop=attn_drop,
            proj_drop=drop)

        self.drop_path = DropPath(drop_path) if drop_path > 0. else M.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

        if self.shift_size > 0:
            #attn_mask = self.calculate_mask(self.input_resolution)
            attn_mask = self.calculate_mask((64,64))
        else:
            attn_mask = None

        #self.register_buffer('attn_mask', attn_mask)
        self.attn_mask = Parameter(attn_mask).detach()
        #print("self.attn_mask=", self.attn_mask)

    def calculate_mask(self, x_size):
        # calculate attention mask for SW-MSA
        h, w = x_size
        img_mask = F.zeros((1, h, w, 1))  # 1 h w 1
        h_slices = (slice(0, -self.window_size), slice(-self.window_size,
                                                       -self.shift_size), slice(-self.shift_size, None))
        w_slices = (slice(0, -self.window_size), slice(-self.window_size,
                                                       -self.shift_size), slice(-self.shift_size, None))
        cnt = 0
        for h in h_slices:
            for w in w_slices:
                img_mask[:, h, w, :] = cnt
                cnt += 1

        mask_windows = window_partition(img_mask, self.window_size)  # nw, window_size, window_size, 1
        #mask_windows = mask_windows.view(-1, self.window_size * self.window_size)
        mask_windows = F.reshape(mask_windows,(-1, self.window_size * self.window_size))
        #attn_mask = mask_windows.unsqueeze(1) - mask_windows.unsqueeze(2)
        attn_mask = F.expand_dims(mask_windows,1) - F.expand_dims(mask_windows,2)

        #attn_mask = attn_mask.masked_fill(attn_mask != 0, float(-100.0)).masked_fill(attn_mask == 0, float(0.0))
        mask_1 = F.zeros(attn_mask.shape)
        mask_1[:] = float(-100.0)
        attn_mask = F.where(attn_mask != 0,mask_1,attn_mask)
        mask_2 = F.zeros(attn_mask.shape)
        mask_2[:] = float(0.0)
        attn_mask = F.where(attn_mask == 0,mask_2,attn_mask)
        #print("attn_mask=", attn_mask.shape)
        return attn_mask

    def forward(self, x, x_size): #[1, 4096, 96],[64,64] out=[1, 4096, 96]
        h, w = x_size
        b, _, c = x.shape
        # assert seq_len == h * w, "input feature has wrong size"

        shortcut = x
        x = self.norm1(x)
        #x = x.view(b, h, w, c)
        x = F.reshape(x,(b, h, w, c))

        # cyclic shift
        if self.shift_size > 0: #默认>0
            shifted_x = F.roll(x, shift=(-self.shift_size, -self.shift_size), axis=(1, 2)) #[1, 64, 64, 96]
        else:
            shifted_x = x

        # partition windows

        x_windows = window_partition(shifted_x, self.window_size)  # nw*b, window_size, window_size, c ,self.window_size=8
        #print("x_windows =",x_windows.shape) #[64, 8, 8, 96]
        #x_windows = x_windows.view(-1, self.window_size * self.window_size, c)  # nw*b, window_size*window_size, c [64, 64, 96]
        x_windows = F.reshape(x_windows,(-1, self.window_size * self.window_size, c))
        #print("x_windows=",x_windows.shape)
        # W-MSA/SW-MSA (to be compatible for testing on images whose shapes are the multiple of window size
        # if self.input_resolution == x_size: #默认 self.input_resolution == x_size
        #     #print("self.attn_mask=",self.attn_mask.shape) #self.attn_mask=None
        #     attn_windows = self.attn(x_windows, mask=self.attn_mask.detach())  # nw*b, window_size*window_size, c
        #     #print("attn_windows=",attn_windows.shape) #[64, 64, 96]
        # else:
        #     attn_windows = self.attn(x_windows, mask=self.calculate_mask(x_size).to(x.device))
        #print("x_size=",x_size)(256,256)
        attn_windows = self.attn(x_windows, mask=self.calculate_mask(x_size).to(x.device))
        # attn_windows =[64, 64, 96]
        # merge windows
        # attn_windows = attn_windows.view(-1, self.window_size, self.window_size, c) #[64, 8, 8, 96]
        attn_windows = F.reshape(attn_windows,(-1, self.window_size, self.window_size, c))
        shifted_x = window_reverse(attn_windows, self.window_size, h, w)  # b h' w' c
        #print("shifted_x=",shifted_x.shape) #[1, 64, 64, 96]

        # reverse cyclic shift
        if self.shift_size > 0: #默认>0
            x = F.roll(shifted_x, shift=(self.shift_size, self.shift_size), axis=(1, 2))
            #print("x=",x.shape) #[1, 64, 64, 96]
        else:
            x = shifted_x
        # x = x.view(b, h * w, c)
        x = F.reshape(x,(b, h * w, c))

        # FFN
        x = shortcut + self.drop_path(x)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        #print("x=",x.shape) [1, 4096, 96]
        return x

    def extra_repr(self) -> str:
        return (f'dim={self.dim}, input_resolution={self.input_resolution}, num_heads={self.num_heads}, '
                f'window_size={self.window_size}, shift_size={self.shift_size}, mlp_ratio={self.mlp_ratio}')

    def flops(self):
        flops = 0
        h, w = self.input_resolution
        # norm1
        flops += self.dim * h * w
        # W-MSA/SW-MSA
        nw = h * w / self.window_size / self.window_size
        flops += nw * self.attn.flops(self.window_size * self.window_size)
        # mlp
        flops += 2 * h * w * self.dim * self.dim * self.mlp_ratio
        # norm2
        flops += self.dim * h * w
        return flops


class PatchMerging(M.Module):
    r""" Patch Merging Layer.

    Args:
        input_resolution (tuple[int]): Resolution of input feature.
        dim (int): Number of input channels.
        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm
    """

    def __init__(self, input_resolution, dim, norm_layer=M.LayerNorm):
        super().__init__()
        self.input_resolution = input_resolution
        self.dim = dim
        self.reduction = M.Linear(4 * dim, 2 * dim, bias=False)
        self.norm = norm_layer(4 * dim)

    def forward(self, x):
        """
        x: b, h*w, c
        """
        h, w = self.input_resolution
        b, seq_len, c = x.shape
        assert seq_len == h * w, 'input feature has wrong size'
        assert h % 2 == 0 and w % 2 == 0, f'x size ({h}*{w}) are not even.'

        x = x.view(b, h, w, c)

        x0 = x[:, 0::2, 0::2, :]  # b h/2 w/2 c
        x1 = x[:, 1::2, 0::2, :]  # b h/2 w/2 c
        x2 = x[:, 0::2, 1::2, :]  # b h/2 w/2 c
        x3 = x[:, 1::2, 1::2, :]  # b h/2 w/2 c
        x = F.concat([x0, x1, x2, x3], axis=-1)  # b h/2 w/2 4*c
        #x = x.view(b, -1, 4 * c)  # b h/2*w/2 4*c
        x = F.reshape(x,(b, -1, 4 * c))
        x = self.norm(x)
        x = self.reduction(x)

        return x

    def extra_repr(self) -> str:
        return f'input_resolution={self.input_resolution}, dim={self.dim}'

    def flops(self):
        h, w = self.input_resolution
        flops = h * w * self.dim
        flops += (h // 2) * (w // 2) * 4 * self.dim * 2 * self.dim
        return flops


class BasicLayer(M.Module):
    """ A basic Swin Transformer layer for one stage.

    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        depth (int): Number of blocks.
        num_heads (int): Number of attention heads.
        window_size (int): Local window size.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0
        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm
        downsample (nn.Module | None, optional): Downsample layer at the end of the layer. Default: None
        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False.
    """

    def __init__(self,
                 dim,
                 input_resolution,
                 depth,
                 num_heads,
                 window_size,
                 mlp_ratio=4.,
                 qkv_bias=True,
                 qk_scale=None,
                 drop=0.,
                 attn_drop=0.,
                 drop_path=0.,
                 norm_layer=M.LayerNorm,
                 downsample=None,
                 use_checkpoint=False):

        super().__init__()
        self.dim = dim
        self.input_resolution = input_resolution
        self.depth = depth
        self.use_checkpoint = use_checkpoint

        # build blocks
        self.blocks = [
            SwinTransformerBlock(
                dim=dim,
                input_resolution=input_resolution,
                num_heads=num_heads,
                window_size=window_size,
                shift_size=0 if (i % 2 == 0) else window_size // 2,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias,
                qk_scale=qk_scale,
                drop=drop,
                attn_drop=attn_drop,
                drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path,
                norm_layer=norm_layer) for i in range(depth)
        ]

        # patch merging layer
        if downsample is not None:
            self.downsample = downsample(input_resolution, dim=dim, norm_layer=norm_layer)
        else:
            self.downsample = None

    def forward(self, x, x_size): #[1, 4096, 96],(64,64)
        for blk in self.blocks:
            if self.use_checkpoint:
                print("self.use_checkpoint,error!!!!!!!!!!!!")
                #x = checkpoint.checkpoint(blk, x)
            else:
                x = blk(x, x_size)
        if self.downsample is not None:
            # print("self.downsample")
            x = self.downsample(x)
        return x

    def extra_repr(self) -> str:
        return f'dim={self.dim}, input_resolution={self.input_resolution}, depth={self.depth}'

    def flops(self):
        flops = 0
        for blk in self.blocks:
            flops += blk.flops()
        if self.downsample is not None:
            flops += self.downsample.flops()
        return flops


class RSTB(M.Module):
    """Residual Swin Transformer Block (RSTB).

    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        depth (int): Number of blocks.
        num_heads (int): Number of attention heads.
        window_size (int): Local window size.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0
        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm
        downsample (nn.Module | None, optional): Downsample layer at the end of the layer. Default: None
        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False.
        img_size: Input image size.
        patch_size: Patch size.
        resi_connection: The convolutional block before residual connection.
    """

    def __init__(self,
                 dim,
                 input_resolution,
                 depth,
                 num_heads,
                 window_size,
                 mlp_ratio=4.,
                 qkv_bias=True,
                 qk_scale=None,
                 drop=0.,
                 attn_drop=0.,
                 drop_path=0.,
                 norm_layer=M.LayerNorm,
                 downsample=None,
                 use_checkpoint=False,
                 img_size=224,
                 patch_size=4,
                 resi_connection='1conv'):
        super(RSTB, self).__init__()

        self.dim = dim
        self.input_resolution = input_resolution

        self.residual_group = BasicLayer(
            dim=dim,
            input_resolution=input_resolution,
            depth=depth,
            num_heads=num_heads,
            window_size=window_size,
            mlp_ratio=mlp_ratio,
            qkv_bias=qkv_bias,
            qk_scale=qk_scale,
            drop=drop,
            attn_drop=attn_drop,
            drop_path=drop_path,
            norm_layer=norm_layer,
            downsample=downsample,
            use_checkpoint=use_checkpoint)

        if resi_connection == '1conv':
            self.conv = M.Conv2d(dim, dim, 3, 1, 1)
        elif resi_connection == '3conv':
            # to save parameters and memory
            self.conv = M.Sequential(
                M.Conv2d(dim, dim // 4, 3, 1, 1), M.LeakyReLU(negative_slope=0.2, inplace=True),
                M.Conv2d(dim // 4, dim // 4, 1, 1, 0), M.LeakyReLU(negative_slope=0.2, inplace=True),
                M.Conv2d(dim // 4, dim, 3, 1, 1))

        self.patch_embed = PatchEmbed(
            img_size=img_size, patch_size=patch_size, in_chans=0, embed_dim=dim, norm_layer=None)

        self.patch_unembed = PatchUnEmbed(
            img_size=img_size, patch_size=patch_size, in_chans=0, embed_dim=dim, norm_layer=None)

    def forward(self, x, x_size):
        #print("x=",x.shape) #[1, 4096, 96]
        return self.patch_embed(self.conv(self.patch_unembed(self.residual_group(x, x_size), x_size))) + x

    def flops(self):
        flops = 0
        flops += self.residual_group.flops()
        h, w = self.input_resolution
        flops += h * w * self.dim * self.dim * 9
        flops += self.patch_embed.flops()
        flops += self.patch_unembed.flops()

        return flops


class PatchEmbed(M.Module):
    r""" Image to Patch Embedding

    Args:
        img_size (int): Image size.  Default: 224.
        patch_size (int): Patch token size. Default: 4.
        in_chans (int): Number of input image channels. Default: 3.
        embed_dim (int): Number of linear projection output channels. Default: 96.
        norm_layer (nn.Module, optional): Normalization layer. Default: None
    """

    def __init__(self, img_size=224, patch_size=4, in_chans=3, embed_dim=96, norm_layer=None):
        super().__init__()
        img_size = to_2tuple(img_size)
        patch_size = to_2tuple(patch_size)
        patches_resolution = [img_size[0] // patch_size[0], img_size[1] // patch_size[1]]
        self.img_size = img_size
        self.patch_size = patch_size
        self.patches_resolution = patches_resolution
        self.num_patches = patches_resolution[0] * patches_resolution[1]

        self.in_chans = in_chans
        self.embed_dim = embed_dim

        if norm_layer is not None:
            self.norm = norm_layer(embed_dim)
        else:
            self.norm = None

    def forward(self, x): #[1, 96, 64, 64]
        x = F.transpose(F.flatten(x,2),(0, 2, 1))  # b Ph*Pw c [1, 4096, 96]

        if self.norm is not None:
            x = self.norm(x)
        return x

    def flops(self):
        flops = 0
        h, w = self.img_size
        if self.norm is not None:
            flops += h * w * self.embed_dim
        return flops


class PatchUnEmbed(M.Module):
    r""" Image to Patch Unembedding

    Args:
        img_size (int): Image size.  Default: 224.
        patch_size (int): Patch token size. Default: 4.
        in_chans (int): Number of input image channels. Default: 3.
        embed_dim (int): Number of linear projection output channels. Default: 96.
        norm_layer (nn.Module, optional): Normalization layer. Default: None
    """

    def __init__(self, img_size=224, patch_size=4, in_chans=3, embed_dim=96, norm_layer=None):
        super().__init__()
        img_size = to_2tuple(img_size)
        patch_size = to_2tuple(patch_size)
        patches_resolution = [img_size[0] // patch_size[0], img_size[1] // patch_size[1]]
        self.img_size = img_size
        self.patch_size = patch_size
        self.patches_resolution = patches_resolution
        self.num_patches = patches_resolution[0] * patches_resolution[1]

        self.in_chans = in_chans
        self.embed_dim = embed_dim

    def forward(self, x, x_size):
        # x = x.transpose(1, 2).view(x.shape[0], self.embed_dim, x_size[0], x_size[1])  # b Ph*Pw c
        #print("x=",x.shape)
        x = F.transpose(x,(0,2,1))
        x = F.reshape(x,(x.shape[0], self.embed_dim, x_size[0], x_size[1]))
        return x

    def flops(self):
        flops = 0
        return flops


class Upsample(M.Sequential):
    """Upsample module.

    Args:
        scale (int): Scale factor. Supported scales: 2^n and 3.
        num_feat (int): Channel number of intermediate features.
    """

    def __init__(self, scale, num_feat):
        m = []
        if (scale & (scale - 1)) == 0:  # scale = 2^n
            for _ in range(int(math.log(scale, 2))):
                m.append(M.Conv2d(num_feat, 4 * num_feat, 3, 1, 1))
                m.append(M.PixelShuffle(2))
        elif scale == 3:
            m.append(M.Conv2d(num_feat, 9 * num_feat, 3, 1, 1))
            m.append(M.PixelShuffle(3))
        else:
            raise ValueError(f'scale {scale} is not supported. Supported scales: 2^n and 3.')
        super(Upsample, self).__init__(*m)


class UpsampleOneStep(M.Sequential):
    """UpsampleOneStep module (the difference with Upsample is that it always only has 1conv + 1pixelshuffle)
       Used in lightweight SR to save parameters.

    Args:
        scale (int): Scale factor. Supported scales: 2^n and 3.
        num_feat (int): Channel number of intermediate features.

    """

    def __init__(self, scale, num_feat, num_out_ch, input_resolution=None):
        self.num_feat = num_feat
        self.input_resolution = input_resolution
        m = []
        m.append(M.Conv2d(num_feat, (scale**2) * num_out_ch, 3, 1, 1))
        m.append(M.PixelShuffle(scale))
        super(UpsampleOneStep, self).__init__(*m)

    def flops(self):
        h, w = self.input_resolution
        flops = h * w * self.num_feat * 3 * 9
        return flops


@ARCH_REGISTRY.register()
class Predictor(M.Module):
    r""" SwinIR
        A PyTorch impl of : `SwinIR: Image Restoration Using Swin Transformer`, based on Swin Transformer.

    Args:
        img_size (int | tuple(int)): Input image size. Default 64
        patch_size (int | tuple(int)): Patch size. Default: 1
        in_chans (int): Number of input image channels. Default: 3
        embed_dim (int): Patch embedding dimension. Default: 96
        depths (tuple(int)): Depth of each Swin Transformer layer.
        num_heads (tuple(int)): Number of attention heads in different layers.
        window_size (int): Window size. Default: 7
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim. Default: 4
        qkv_bias (bool): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float): Override default qk scale of head_dim ** -0.5 if set. Default: None
        drop_rate (float): Dropout rate. Default: 0
        attn_drop_rate (float): Attention dropout rate. Default: 0
        drop_path_rate (float): Stochastic depth rate. Default: 0.1
        norm_layer (nn.Module): Normalization layer. Default: nn.LayerNorm.
        ape (bool): If True, add absolute position embedding to the patch embedding. Default: False
        patch_norm (bool): If True, add normalization after patch embedding. Default: True
        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False
        upscale: Upscale factor. 2/3/4/8 for image SR, 1 for denoising and compress artifact reduction
        img_range: Image range. 1. or 255.
        upsampler: The reconstruction reconstruction module. 'pixelshuffle'/'pixelshuffledirect'/'nearest+conv'/None
        resi_connection: The convolutional block before residual connection. '1conv'/'3conv'
    """

    def __init__(self,
                 img_size=64,
                 patch_size=1,
                 in_chans=3,
                 embed_dim=96,
                 depths=(6, 6, 6, 6),
                 num_heads=(6, 6, 6, 6),
                 window_size=7,
                 mlp_ratio=4.,
                 qkv_bias=True,
                 qk_scale=None,
                 drop_rate=0.,
                 attn_drop_rate=0.,
                 drop_path_rate=0.1,
                 norm_layer=M.LayerNorm,
                 ape=False,
                 patch_norm=True,
                 use_checkpoint=False,
                 upscale=2,
                 img_range=1.,
                 upsampler='',
                 resi_connection='1conv',
                 **kwargs):
        super(Predictor, self).__init__()
        num_in_ch = in_chans
        num_out_ch = in_chans
        num_feat = 64
        self.img_range = img_range
        if in_chans == 3:
            rgb_mean = (0.4488, 0.4371, 0.4040)
            #self.mean = megengine.Tensor(rgb_mean).view(1, 3, 1, 1)
            self.mean = F.reshape(megengine.Tensor(rgb_mean),(1, 3, 1, 1))
        else:
            self.mean = F.zeros(shape=(1, 1, 1, 1))
        self.upscale = upscale
        self.upsampler = upsampler

        # ------------------------- 1, shallow feature extraction ------------------------- #
        print("num_in_ch=",num_in_ch)
        self.conv_first = M.Conv2d(num_in_ch, embed_dim, 3, 1, 1)

        # ------------------------- 2, deep feature extraction ------------------------- #
        self.num_layers = len(depths) #4
        #print("self.num_layers=",self.num_layers)
        self.embed_dim = embed_dim
        self.ape = ape
        self.patch_norm = patch_norm
        self.num_features = embed_dim
        self.mlp_ratio = mlp_ratio

        # split image into non-overlapping patches
        self.patch_embed = PatchEmbed(
            img_size=img_size,
            patch_size=patch_size,
            in_chans=embed_dim,
            embed_dim=embed_dim,
            norm_layer=norm_layer if self.patch_norm else None)
        num_patches = self.patch_embed.num_patches
        patches_resolution = self.patch_embed.patches_resolution
        self.patches_resolution = patches_resolution

        # merge non-overlapping patches into image
        self.patch_unembed = PatchUnEmbed(
            img_size=img_size,
            patch_size=patch_size,
            in_chans=embed_dim,
            embed_dim=embed_dim,
            norm_layer=norm_layer if self.patch_norm else None)

        # absolute position embedding
        if self.ape:
            self.absolute_pos_embed = megengine.Parameter(F.zeros(1, num_patches, embed_dim))
            trunc_normal_(self.absolute_pos_embed, std=.02)

        self.pos_drop = M.Dropout(drop_prob=drop_rate)

        # stochastic depth
        dpr = [x.item() for x in F.linspace(0, drop_path_rate, sum(depths))]  # stochastic depth decay rule

        # build Residual Swin Transformer blocks (RSTB)
        self.layers = []
        for i_layer in range(self.num_layers):
            layer = RSTB(
                dim=embed_dim,
                input_resolution=(patches_resolution[0], patches_resolution[1]),
                depth=depths[i_layer],
                num_heads=num_heads[i_layer],
                window_size=window_size,
                mlp_ratio=self.mlp_ratio,
                qkv_bias=qkv_bias,
                qk_scale=qk_scale,
                drop=drop_rate,
                attn_drop=attn_drop_rate,
                drop_path=dpr[sum(depths[:i_layer]):sum(depths[:i_layer + 1])],  # no impact on SR results
                norm_layer=norm_layer,
                downsample=None,
                use_checkpoint=use_checkpoint,
                img_size=img_size,
                patch_size=patch_size,
                resi_connection=resi_connection)
            self.layers.append(layer)
        self.norm = norm_layer(self.num_features)

        # build the last conv layer in deep feature extraction
        if resi_connection == '1conv':
            self.conv_after_body = M.Conv2d(embed_dim, embed_dim, 3, 1, 1)
        elif resi_connection == '3conv':
            # to save parameters and memory
            self.conv_after_body = M.Sequential(
                M.Conv2d(embed_dim, embed_dim // 4, 3, 1, 1), M.LeakyReLU(negative_slope=0.2, inplace=True),
                M.Conv2d(embed_dim // 4, embed_dim // 4, 1, 1, 0), M.LeakyReLU(negative_slope=0.2, inplace=True),
                M.Conv2d(embed_dim // 4, embed_dim, 3, 1, 1))

        # ------------------------- 3, high quality image reconstruction ------------------------- #
        if self.upsampler == 'pixelshuffle':
            # for classical SR
            self.conv_before_upsample = M.Sequential(
                M.Conv2d(embed_dim, num_feat, 3, 1, 1), M.LeakyReLU(inplace=True))
            self.upsample = Upsample(upscale, num_feat)
            self.conv_last = M.Conv2d(num_feat, num_out_ch, 3, 1, 1)
        elif self.upsampler == 'pixelshuffledirect':
            # for lightweight SR (to save parameters)
            self.upsample = UpsampleOneStep(upscale, embed_dim, num_out_ch,
                                            (patches_resolution[0], patches_resolution[1]))
        elif self.upsampler == 'nearest+conv':
            # for real-world SR (less artifacts)
            assert self.upscale == 4, 'only support x4 now.'
            self.conv_before_upsample = M.Sequential(
                M.Conv2d(embed_dim, num_feat, 3, 1, 1), M.LeakyReLU(inplace=True))
            self.conv_up1 = M.Conv2d(num_feat, num_feat, 3, 1, 1)
            self.conv_up2 = M.Conv2d(num_feat, num_feat, 3, 1, 1)
            self.conv_hr = M.Conv2d(num_feat, num_feat, 3, 1, 1)
            self.conv_last = M.Conv2d(num_feat, num_out_ch, 3, 1, 1)
            self.lrelu = M.LeakyReLU(negative_slope=0.2, inplace=True)
        else:
            # for image denoising and JPEG compression artifact reduction
            self.conv_last = M.Conv2d(embed_dim, num_out_ch, 3, 1, 1)

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, M.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, M.Linear) and m.bias is not None:
                M.init.fill_(m.bias, 0)
        elif isinstance(m, M.LayerNorm):
            M.init.fill_(m.bias, 0)
            M.init.fill_(m.weight, 1.0)

    #@torch.jit.ignore
    def no_weight_decay(self):
        return {'absolute_pos_embed'}

    #@torch.jit.ignore
    def no_weight_decay_keywords(self):
        return {'relative_position_bias_table'}

    def forward_features(self, x): #[1, 96, 64, 64]
        x_size = (x.shape[2], x.shape[3]) #(64,64)
        x = self.patch_embed(x) #[1, 4096, 96] 4096=64*64
        #print("x=",x.shape)
        if self.ape:
            x = x + self.absolute_pos_embed
        x = self.pos_drop(x) #[1, 4096, 96] 4096=64*64
        #print("x=",x.shape)

        for layer in self.layers:
            x = layer(x, x_size) #[1, 4096, 96],(64,64)

        x = self.norm(x)  # b seq_len c
        x = self.patch_unembed(x, x_size)
        #print("x=", x.shape)
        return x

    def forward(self, x):
        self.mean = self.mean.astype(x.dtype)
        x = (x - self.mean) * self.img_range

        if self.upsampler == 'pixelshuffle':
            # for classical SR
            x = self.conv_first(x)
            x = self.conv_after_body(self.forward_features(x)) + x
            x = self.conv_before_upsample(x)
            x = self.conv_last(self.upsample(x))
        elif self.upsampler == 'pixelshuffledirect':
            # for lightweight SR
            x = self.conv_first(x)
            x = self.conv_after_body(self.forward_features(x)) + x
            x = self.upsample(x)
        elif self.upsampler == 'nearest+conv':
            # for real-world SR
            x = self.conv_first(x)
            x = self.conv_after_body(self.forward_features(x)) + x
            x = self.conv_before_upsample(x)
            x = self.lrelu(self.conv_up1(F.nn.interpolate(x, scale_factor=2, mode='nearest')))
            x = self.lrelu(self.conv_up2(F.nn.interpolate(x, scale_factor=2, mode='nearest')))
            x = self.conv_last(self.lrelu(self.conv_hr(x)))
        else:
            # for image denoising and JPEG compression artifact reduction
            #print("x=",x.shape)
            x_first = self.conv_first(x) #[1, 96, 64, 64] [b,embed_dim,h,w]
            res = self.conv_after_body(self.forward_features(x_first)) + x_first
            x = x + self.conv_last(res)

        x = x / self.img_range + self.mean

        return x

    def flops(self):
        flops = 0
        h, w = self.patches_resolution
        flops += h * w * 3 * self.embed_dim * 9
        flops += self.patch_embed.flops()
        for layer in self.layers:
            flops += layer.flops()
        flops += h * w * 3 * self.embed_dim * self.embed_dim
        flops += self.upsample.flops()
        return flops


if __name__ == '__main__':
    upscale = 4
    window_size = 8
    #height = (1024 // upscale // window_size + 1) * window_size
    #width = (720 // upscale // window_size + 1) * window_size
    height = 64
    width = 64
    model = Predictor(
        upscale=1,
        img_size=(height, width),
        patch_size=1, #无效，默认为1，且无法修改
        window_size=window_size,
        img_range=1.,
        depths=[4,4],
        embed_dim=32,
        num_heads=[2,2],
        mlp_ratio=2,
        upsampler=None)
    #print(model)
    #print(height, width, model.flops() / 1e9)

    #x = torch.randn((1, 3, height, width))
    #x = megengine.random.uniform(size=(1, 3, height, width))
    #x = megengine.random.uniform(size=(1, 3, height, width))
    x = megengine.tensor(np.ones(shape=(1, 3, height, width)))
    #print(x.shape)
    x = model(x)
    print(x.shape)
    #print(x)
